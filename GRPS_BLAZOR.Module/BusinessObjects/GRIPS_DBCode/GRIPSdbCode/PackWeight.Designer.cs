//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
using DisplayNameAttribute = System.ComponentModel.DisplayNameAttribute;

namespace GRPS_BLAZOR.Module.BusinessObjects.GRIPS_DBCode.GRIPS_schema
{

    public partial class PackWeight : XPObject
    {
        decimal fQuantity;
        public decimal Quantity
        {
            get { return fQuantity; }
            set { SetPropertyValue<decimal>(nameof(Quantity), ref fQuantity, value); }
        }
        EnumInstance fUnitOfMeas;
        [DataSourceCriteria("Domain.Name = 'WeightType'")]
        [Association(@"PackWeightReferencesEnumInstance3")]
        public EnumInstance UnitOfMeas
        {
            get { return fUnitOfMeas; }
            set { SetPropertyValue<EnumInstance>(nameof(UnitOfMeas), ref fUnitOfMeas, value); }
        }
        EnumInstance fType;
        [Association(@"PackWeightReferencesEnumInstance2")]
        public EnumInstance Type
        {
            get { return fType; }
            set { SetPropertyValue<EnumInstance>(nameof(Type), ref fType, value); }
        }
        EnumInstance fMaterial;
        [DataSourceCriteria("Domain.Name = 'MaterialType'")]
        [Association(@"PackWeightReferencesEnumInstance")]
        [DisplayName("Category")]
        public EnumInstance Material
        {
            get { return fMaterial; }
            set { SetPropertyValue<EnumInstance>(nameof(Material), ref fMaterial, value); }
        }
        Part fPart;
        [Association(@"PackWeightReferencesPart")]
        public Part Part
        {
            get { return fPart; }
            set { SetPropertyValue<Part>(nameof(Part), ref fPart, value); }
        }
        EnumInstance fMaterialCategory;
        [DataSourceCriteria("Domain.Name = 'MaterialCategory'")]
        [Association(@"PackWeightReferencesEnumInstance1")]
        [DisplayName("Sub Category")]
        public EnumInstance MaterialCategory
        {
            get { return fMaterialCategory; }
            set { SetPropertyValue<EnumInstance>(nameof(MaterialCategory), ref fMaterialCategory, value); }
        }
        double fMinRecCon;
        [DisplayName("Min. %")]
        public double MinRecCon
        {
            get { return fMinRecCon; }
            set { SetPropertyValue<double>(nameof(MinRecCon), ref fMinRecCon, value); }
        }
        double fMaxRecCon;
        [DisplayName("Max. %")]
        public double MaxRecCon
        {
            get { return fMaxRecCon; }
            set { SetPropertyValue<double>(nameof(MaxRecCon), ref fMaxRecCon, value); }
        }
        double fAvgRecCon;
        [DisplayName("Avg. %")]
        public double AvgRecCon
        {
            get { return fAvgRecCon; }
            set { SetPropertyValue<double>(nameof(AvgRecCon), ref fAvgRecCon, value); }
        }
        double fMinPostCon;
        [DisplayName("Min. %")]
        public double MinPostCon
        {
            get { return fMinPostCon; }
            set { SetPropertyValue<double>(nameof(MinPostCon), ref fMinPostCon, value); }
        }
        double fMaxPostCon;
        [DisplayName("Max. %")]
        public double MaxPostCon
        {
            get { return fMaxPostCon; }
            set { SetPropertyValue<double>(nameof(MaxPostCon), ref fMaxPostCon, value); }
        }
        double fAvgPostCon;
        [DisplayName("Avg. %")]
        public double AvgPostCon
        {
            get { return fAvgPostCon; }
            set { SetPropertyValue<double>(nameof(AvgPostCon), ref fAvgPostCon, value); }
        }
        int fTonnesDivisor;
        public int TonnesDivisor
        {
            get { return fTonnesDivisor; }
            set { SetPropertyValue<int>(nameof(TonnesDivisor), ref fTonnesDivisor, value); }
        }
        string fForestryCertified;
        [DisplayName("Standard")]
        public string ForestryCertified
        {
            get { return fForestryCertified; }
            set { SetPropertyValue<string>(nameof(ForestryCertified), ref fForestryCertified, value); }
        }
        bool fMaterialRecyclable;
        public bool MaterialRecyclable
        {
            get { return fMaterialRecyclable; }
            set { SetPropertyValue<bool>(nameof(MaterialRecyclable), ref fMaterialRecyclable, value); }
        }
        bool fRefillable;
        public bool Refillable
        {
            get { return fRefillable; }
            set { SetPropertyValue<bool>(nameof(Refillable), ref fRefillable, value); }
        }
        bool fHeavyMetalComp;
        [DisplayName("Heavy Metals")]
        public bool HeavyMetalComp
        {
            get { return fHeavyMetalComp; }
            set { SetPropertyValue<bool>(nameof(HeavyMetalComp), ref fHeavyMetalComp, value); }
        }
        bool fConflictMetalComp;
        [DisplayName("Conflict Metals")]
        public bool ConflictMetalComp
        {
            get { return fConflictMetalComp; }
            set { SetPropertyValue<bool>(nameof(ConflictMetalComp), ref fConflictMetalComp, value); }
        }
        bool fBioDegrad;
        [DisplayName("Biodegradable")]
        public bool BioDegrad
        {
            get { return fBioDegrad; }
            set { SetPropertyValue<bool>(nameof(BioDegrad), ref fBioDegrad, value); }
        }
        string fOnPackSustMsg;
        [DisplayName("On Pack Message")]
        public string OnPackSustMsg
        {
            get { return fOnPackSustMsg; }
            set { SetPropertyValue<string>(nameof(OnPackSustMsg), ref fOnPackSustMsg, value); }
        }
        string fPlacePackFill;
        [DisplayName("Pack Fill")]
        public string PlacePackFill
        {
            get { return fPlacePackFill; }
            set { SetPropertyValue<string>(nameof(PlacePackFill), ref fPlacePackFill, value); }
        }
        string fPlaceManufac;
        [DisplayName("Manufacture")]
        public string PlaceManufac
        {
            get { return fPlaceManufac; }
            set { SetPropertyValue<string>(nameof(PlaceManufac), ref fPlaceManufac, value); }
        }
        string fColour;
        public string Colour
        {
            get { return fColour; }
            set { SetPropertyValue<string>(nameof(Colour), ref fColour, value); }
        }
        decimal fSAPQuantity;
        public decimal SAPQuantity
        {
            get { return fSAPQuantity; }
            set { SetPropertyValue<decimal>(nameof(SAPQuantity), ref fSAPQuantity, value); }
        }
    }

}
