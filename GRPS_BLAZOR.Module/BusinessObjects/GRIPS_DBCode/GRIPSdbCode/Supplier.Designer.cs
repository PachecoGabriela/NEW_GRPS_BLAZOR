//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
using GRPS_BLAZOR.Module.BusinessObjects.Base;
using DevExpress.Persistent.Validation;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp;
using DevExpress.Persistent.BaseImpl;
using DisplayNameAttribute = System.ComponentModel.DisplayNameAttribute;
using GRPS_BLAZOR.Module.Interfaces;

namespace GRPS_BLAZOR.Module.BusinessObjects.GRIPS_DBCode.GRIPS_schema
{
    [NavigationItem("Grips Desktop")]
    [VisibleInReports]
    public partial class Supplier : GRIPSObject, IEditInPopupButton
    {
        string fPartyCode;
        [DisplayName("Party Code")]
        [Browsable(false)]
        public string PartyCode
        {
            get { return fPartyCode; }
            set { SetPropertyValue<string>(nameof(PartyCode), ref fPartyCode, value); }
        }
        int fType;
        public int Type
        {
            get { return fType; }
            set { SetPropertyValue<int>(nameof(Type), ref fType, value); }
        }
        string fName;
        [RuleRequiredField(DefaultContexts.Save,
            CustomMessageTemplate = "Name is required")]
        public string Name
        {
            get { return fName; }
            set { SetPropertyValue<string>(nameof(Name), ref fName, value); }
        }
        SupplierGroup fGroup;
        [System.ComponentModel.DisplayName("Supplier Group")]
        [Association(@"SupplierReferencesSupplierGroup")]
        public SupplierGroup Group
        {
            get { return fGroup; }
            set { SetPropertyValue<SupplierGroup>(nameof(Group), ref fGroup, value); }
        }
        EnumInstance fPartyType;
        [System.ComponentModel.DisplayName("Supplier Type")]
        [DataSourceCriteria("Domain.Name = 'SupplierType'")]
        [Association(@"SupplierReferencesEnumInstance")]
        public EnumInstance PartyType
        {
            get { return fPartyType; }
            set { SetPropertyValue<EnumInstance>(nameof(PartyType), ref fPartyType, value); }
        }
 
        Period fActiveFrom;
        [Association(@"SupplierReferencesPeriod")]
        public Period ActiveFrom
        {
            get { return fActiveFrom; }
            set { SetPropertyValue<Period>(nameof(ActiveFrom), ref fActiveFrom, value); }
        }
        Period fActiveTo;
        [Association(@"SupplierReferencesPeriod1")]
        public Period ActiveTo
        {
            get { return fActiveTo; }
            set { SetPropertyValue<Period>(nameof(ActiveTo), ref fActiveTo, value); }
        }
        Company fCompany;
        [Association(@"SupplierReferencesCompany")]
        [Browsable(false)]
        public Company Company
        {
            get { return fCompany; }
            set { SetPropertyValue<Company>(nameof(Company), ref fCompany, value); }
        }

        [Browsable(false)]
        [Association(@"ProductReferencesSupplier")]
        public XPCollection<Product> Products { get { return GetCollection<Product>(nameof(Products)); } }

        [DevExpress.Xpo.Aggregated]
        [Association(@"SupplierAddressReferencesSupplier")]
        public XPCollection<SupplierAddress> SupplierAddresses { get { return GetCollection<SupplierAddress>(nameof(SupplierAddresses)); } }

        [DevExpress.Xpo.Aggregated]
        [Association(@"SupplierContactReferencesSupplier")]
        public XPCollection<SupplierContact> SupplierContacts { get { return GetCollection<SupplierContact>(nameof(SupplierContacts)); } }

        private XPCollection<AuditDataItemPersistent> changeHistory;
        [CollectionOperationSet(AllowAdd = false, AllowRemove = false)]
        public XPCollection<AuditDataItemPersistent> ChangeHistory
        {
            get
            {
                if (changeHistory == null)
                {
                    changeHistory = AuditedObjectWeakReference.GetAuditTrail(Session, this);
                }
                return changeHistory;
            }
        }
    }

}
