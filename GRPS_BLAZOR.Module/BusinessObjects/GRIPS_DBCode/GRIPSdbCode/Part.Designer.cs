//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.Persistent.Base;
using GRPS_BLAZOR.Module.BusinessObjects.Base;
using DevExpress.Persistent.Validation;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp;
using DevExpress.Persistent.BaseImpl;
using DisplayNameAttribute = System.ComponentModel.DisplayNameAttribute;

namespace GRPS_BLAZOR.Module.BusinessObjects.GRIPS_DBCode.GRIPS_schema
{
    [VisibleInReports]
    public partial class Part : GRIPSObject
    {
        string fName;
        [RuleRequiredField(DefaultContexts.Save)]
        public string Name
        {
            get { return fName; }
            set { SetPropertyValue<string>(nameof(Name), ref fName, value); }
        }
        string fDescription;
        public string Description
        {
            get { return fDescription; }
            set { SetPropertyValue<string>(nameof(Description), ref fDescription, value); }
        }
        Period fActiveFrom;
        [Association(@"PartReferencesPeriod")]
        public Period ActiveFrom
        {
            get { return fActiveFrom; }
            set { SetPropertyValue<Period>(nameof(ActiveFrom), ref fActiveFrom, value); }
        }
        Period fActiveTo;
        [Association(@"PartReferencesPeriod1")]
        public Period ActiveTo
        {
            get { return fActiveTo; }
            set { SetPropertyValue<Period>(nameof(ActiveTo), ref fActiveTo, value); }
        }
        PartGroup fPartGroup;
        [Association(@"PartReferencesPartGroup")]
        [DisplayName("Group")]
        public PartGroup PartGroup
        {
            get { return fPartGroup; }
            set { SetPropertyValue<PartGroup>(nameof(PartGroup), ref fPartGroup, value); }
        }

        Company fCompany;
        [Association(@"PartReferencesCompany")]
        public Company Company
        {
            get { return fCompany; }
            set { SetPropertyValue<Company>(nameof(Company), ref fCompany, value); }
        }
        Part fParentComponent;
        [Association(@"PartReferencesPart")]
        public Part ParentComponent
        {
            get { return fParentComponent; }
            set { SetPropertyValue<Part>(nameof(ParentComponent), ref fParentComponent, value); }
        }

        EnumInstance fPartType;
        [DataSourceCriteria("Domain.Name = 'PartType'")]
        [Association(@"PartReferencesEnumInstance")]
        public EnumInstance PartType
        {
            get { return fPartType; }
            set { SetPropertyValue<EnumInstance>(nameof(PartType), ref fPartType, value); }
        }
        [Association(@"BOMItemReferencesPart")]
        public XPCollection<BOMItem> BOMItems { get { return GetCollection<BOMItem>(nameof(BOMItems)); } }
        [Association(@"DimensionReferencesPart")]
        public XPCollection<Dimension> Dimensions { get { return GetCollection<Dimension>(nameof(Dimensions)); } }
        [Association(@"PackagingWeightReferencesPart")]
        public XPCollection<PackagingWeight> PackagingWeights { get { return GetCollection<PackagingWeight>(nameof(PackagingWeights)); } }
        [Association(@"PackWeightReferencesPart")]
        public XPCollection<PackWeight> PackWeights { get { return GetCollection<PackWeight>(nameof(PackWeights)); } }
        [Association(@"PartReferencesPart")]
        public XPCollection<Part> PartCollection { get { return GetCollection<Part>(nameof(PartCollection)); } }
        [Association(@"ProdWeightReferencesPart")]
        public XPCollection<ProdWeight> ProdWeights { get { return GetCollection<ProdWeight>(nameof(ProdWeights)); } }
        [Association(@"SRAttributeReferencesPart")]
        public XPCollection<SRAttribute> SRAttributes { get { return GetCollection<SRAttribute>(nameof(SRAttributes)); } }

        private XPCollection<AuditDataItemPersistent> changeHistory;
        [CollectionOperationSet(AllowAdd = false, AllowRemove = false)]
        public XPCollection<AuditDataItemPersistent> ChangeHistory
        {
            get
            {
                if (changeHistory == null)
                {
                    changeHistory = AuditedObjectWeakReference.GetAuditTrail(Session, this);
                }
                return changeHistory;
            }
        }
    }

}
