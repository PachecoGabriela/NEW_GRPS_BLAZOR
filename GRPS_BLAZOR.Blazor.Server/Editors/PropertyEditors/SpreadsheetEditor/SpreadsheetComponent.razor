@using System.Linq;
@using DevExpress.ExpressApp
@using DevExpress.ExpressApp.Blazor.Services
@using Newtonsoft.Json
@using Syncfusion.EJ2.Spreadsheet
@using Syncfusion.XlsIO
@inject IJSRuntime JSRuntime
@inject IXafApplicationProvider appProvider

<div id="spreadsheetDiv" @ref="spreadsheetElem"></div>

@code {
    [Parameter]
    public object Value { get; set; }
    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }
    [Parameter]
    public EventCallback<object> ValueSaved { get; set; }
    ElementReference spreadsheetElem;
    private DotNetObjectReference<SpreadsheetComponent> dotNetReference;
    private IObjectSpace objectSpace;

    protected override void OnInitialized()
    {
        var test = Value;
        objectSpace = appProvider.GetApplication().CreateObjectSpace();
        dotNetReference = DotNetObjectReference.Create(this);
        base.OnInitialized();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var spreadsheetContent = GetCurrentSpreadSheetData();
            await JSRuntime.InvokeVoidAsync("JSFunctions.RenderSpreadsheet", spreadsheetElem, spreadsheetContent, dotNetReference);

        }
    }

    //no longer required
    [JSInvokable]
    public void GetSpreadSheetFile(object param)
    {
        var saveSettings = JsonConvert.DeserializeObject<SaveSettings>(param.ToString());
        ExcelEngine excelEngine = new ExcelEngine();
        Stream fileStream = Workbook.Save<Stream>(saveSettings);
        MemoryStream ms = new MemoryStream();
        ms.Position = 0;
        fileStream.CopyTo(ms);
        byte[] byteArray = ms.ToArray();
        ValueSaved.InvokeAsync(byteArray);
        objectSpace.CommitChanges();
    }

    [JSInvokable]
    public async Task SetSpreadSheetModified(bool IsModified)
    {
        var chunks = await JSRuntime.InvokeAsync<List<string>>("GetFileData");
        var fileContent = string.Join("", chunks);
        var saveSettings = JsonConvert.DeserializeObject<SaveSettings>(fileContent);
        ExcelEngine excelEngine = new ExcelEngine();
        Stream fileStream = Workbook.Save<Stream>(saveSettings);
        MemoryStream ms = new MemoryStream();
        ms.Position = 0;
        fileStream.CopyTo(ms);
        byte[] byteArray = ms.ToArray();
        await ValueChanged.InvokeAsync(byteArray);
    }

    private string GetCurrentSpreadSheetData()
    {
        var spreadsheetBinaryArray = Value as byte[];
        if (spreadsheetBinaryArray != null && spreadsheetBinaryArray.Length > 0)
        {
            var memorystream = new MemoryStream();
            memorystream.Write(spreadsheetBinaryArray, 0, spreadsheetBinaryArray.Length);
            memorystream.Seek(0, SeekOrigin.Begin);
            OpenRequest open = new OpenRequest();
            ExcelEngine excelEngine = new ExcelEngine();
            IWorkbook workbook;
            if (memorystream.Length > 0)
            {
                workbook = excelEngine.Excel.Workbooks.Open(memorystream, ExcelOpenType.Automatic);
                MemoryStream outputStream = new MemoryStream();
                workbook.SaveAs(outputStream);
                IFormFile formFile = new FormFile(outputStream, 0, outputStream.Length, "", "CurrentSpreadsheet.xlsx");
                open.File = formFile;

            }
            var spreadsheetValue = Workbook.Open(open);
            return spreadsheetValue;
        }
        else
        {
            return string.Empty;
        }




    }
}
